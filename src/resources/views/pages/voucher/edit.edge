@layout.app({ menu: "Edit Voucher" })
@slot('main')

<div class="p-4">
    <form action="/admin/vouchers/edit/{{ data.code }}" method="POST" class="space-y-4">
        <div>
            <label for="code" class="block text-sm font-medium text-gray-700">Kode Voucher</label>
            <input type="text" id="code" value="{{ data.code }}" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" readonly>
        </div>

        <div>
            <label for="type" class="block text-sm font-medium text-gray-700">Tipe Voucher</label>
            <select id="type" name="type" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <option value="Percentage" {{ data.type === 'Percentage' ? 'selected' : '' }}>Percentage</option>
                <option value="Fixed" {{ data.type === 'Fixed' ? 'selected' : '' }}>Fixed</option>
            </select>
        </div>

        <div>
            <label for="value" class="block text-sm font-medium text-gray-700">Nilai Voucher</label>
            <input type="number" id="value" name="value" value="{{ data.value }}" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div>
            <label for="minPurchase" class="block text-sm font-medium text-gray-700">Pembelian Minimum</label>
            <input type="number" id="minPurchase" name="minPurchase" value="{{ data.minPurchase }}" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div>
            <label for="maxVoucher" class="block text-sm font-medium text-gray-700">Max Voucher</label>
            <input type="number" id="maxVoucher" name="maxVoucher" value="{{ data.maxVoucher }}" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div>
            <label for="startDate" class="block text-sm font-medium text-gray-700">Tanggal Mulai</label>
            <input type="date" id="startDate" name="startDate" value="{{ new Date(data.startDate).toISOString().split('T')[0] }}" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div>
            <label for="endDate" class="block text-sm font-medium text-gray-700">Tanggal Berakhir</label>
            <input type="date" id="endDate" name="endDate" value="{{ new Date(data.endDate).toISOString().split('T')[0] }}" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div>
            <button type="submit" class="bg-yellow-500 text-white py-2 px-4 rounded hover:bg-yellow-600">Save</button>
        </div>
    </form>
</div>

<script>
    const editVoucher = async (code, data) => {
        try {
            const endpoint = `{{apiUrl}}/api/v1/vouchers/${code}`;
            
            const response = await fetch(endpoint, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            const contentType = response.headers.get('Content-Type');
            if (!response.ok || !contentType.includes('application/json')) {
                const errorText = await response.text();
                throw new Error(`Server Error: ${errorText}`);
            }

            const voucher = await response.json();
            showToast('success', 'Berhasil', 'Voucher berhasil diperbarui.');
            return voucher;

        } catch (error) {
            console.log(error);
            console.log(error.message);
            showToast('error', 'Error', error.message || 'Terjadi kesalahan saat memperbarui voucher.');
            throw error;
        }
    };

    document.querySelector('form').addEventListener('submit', async (e) => {
        e.preventDefault(); 

        const code = document.getElementById('code').value; 
        const formData = {
            type: document.getElementById('type').value,
            value: parseFloat(document.getElementById('value').value),
            minPurchase: parseFloat(document.getElementById('minPurchase').value),
            maxVoucher: parseFloat(document.getElementById('maxVoucher').value),
            startDate: document.getElementById('startDate').value,
            endDate: document.getElementById('endDate').value,
        };

        try {
            await editVoucher(code, formData);
            setTimeout(() => {
                window.location.href = '/admin/vouchers'; 
            }, 500);
        } catch (error) {
            console.error(error); 
        }
    });
</script>


@endslot
@end
